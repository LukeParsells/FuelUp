import discord
from datetime import datetime, timedelta
from discord.ext import commands

intents = discord.Intents.default()
intents.members = True  # Needed to access emote information

bot= commands.Bot(command_prefix='$', intents=intents)
client = discord.Client(intents=intents)

reminder_channel = None  # Stores the designated reminder channel
reminder_emote = None  # Stores the emote to be used in reminder messages

@bot.event  # Ensure the function is asynchronous
async def on_ready():
  """
  Called when the bot is ready.
  """
  print(f'Logged in as {client.user} (ID: {client.user.id})')

@bot.command()
async def setreminder(ctx, date_time, *, message):
  """
  Sets a reminder for a specific date and time.

  Args:
      ctx (discord.Context): Context of the command invocation.
      date_time (str): Date and time in format MM/DD/YYYY/HHMM (e.g., 04/16/2024/2330).
      message (str): The message content for the reminder.
  """
  try:
      # Parse date and time
      try:
          target_time = datetime.strptime(date_time, "%m/%d/%Y/%H%M")
      except ValueError:
          await ctx.send("Invalid date and time format. Use MM/DD/YYYY/HHMM (e.g., 04/16/2024/2330).")
          return

      # Check if reminder channel is set
      if reminder_channel is None:
          await ctx.send("Please set a reminder channel first using the $reminderchat command.")
          return

      # Calculate delay in seconds
      now = datetime.utcnow()
      delay = target_time - now
      if delay.total_seconds() < 0:
          await ctx.send("Target date and time must be in the future.")
          return

      # Schedule reminder task
      await asyncio.sleep(delay.total_seconds())
      await reminder_channel.send(f"{reminder_emote if reminder_emote else ''} {message}")
      await ctx.send(f"Reminder set for {target_time.strftime('%m/%d/%Y at %H:%M')}.")

  except Exception as e:
      print(f"Error setting reminder: {e}")
      await ctx.send("An error occurred. Please try again later.")

@bot.command()
async def reminderchat(ctx, channel: discord.TextChannel = None):
  """
  Sets the channel where reminders will be sent.

  Args:
      ctx (discord.Context): Context of the command invocation.
      channel (discord.TextChannel, optional): The channel to use for reminders. Defaults to None (clears channel).
  """
  global reminder_channel
  if channel is None:
      reminder_channel = None
      await ctx.send("Reminder channel cleared.")
  else:
      reminder_channel = channel
      await ctx.send(f"Reminder channel set to {channel.mention}.")

@bot.command()
async def reminderemote(ctx, emote_name: str):
  """
  Sets the emote to be used in reminder messages.

  Args:
      ctx (discord.Context): Context of the command invocation.
      emote_name (str): The name of the emote on the server (case-sensitive).
  """
  global reminder_emote
  try:
      emote = await discord.utils.get(ctx.guild.emojis, name=emote_name)
      reminder_emote = emote
      await ctx.send(f"Reminder emote set to {emote}.")
  except discord.HTTPException:
      await ctx.send(f"Emote '{emote_name}' not found.")

# Replace with your bot token
client.run("MTIyNTEyNjEzNzU4ODM1NTEzMg.GoANfw.W9EoGgcLqNLdmHcql_wvMjnx3-_75oKuos61LM")
